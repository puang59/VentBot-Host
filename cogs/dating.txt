from discord.ext import commands
import asyncio
import discord 
import random
from pymongo import MongoClient, message

class dating(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    global cluster
    global db
    global collection
    cluster = MongoClient(
        "mongodb+srv://Edryu:jaisairam4@cluster0.inbe1.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    db = cluster["Dating"]
    collection = db["DatingProfile"]

    # @commands.Cog.listener()
    # async def on_message(message): 
    #     channel = message.channel
    #     await channel.create_thread(name=f"{message.author.discriminator}-{message.author.name}", message=message, auto_archive_duration=1440, reason=None)
    @commands.Cog.listener()
    async def on_member_join(self, member):
        guild = member.guild
        if member.guild.id == 999682901308342342:
            if collection.find_one({"author_id": member.id}):
                data = collection.find_one({"author_id": member.id})
                ch = self.bot.get_channel(int(data["channel_id"]))
                await ch.set_permissions(member, send_messages=True, view_channel=True)
            else:
                try: 
                    user_a = member

                    categ = discord.utils.get(guild.categories, name="PRIVATE SPACE")
                    #text_channel = await categ.create_text_channel(f"{member.name}s vent")
                    text_channel = await categ.create_text_channel(f"{member.name}s - {member.discriminator}")
                    await text_channel.set_permissions(user_a, send_messages=True, view_channel=True)
                    await text_channel.set_permissions(guild.default_role, send_messages=False, view_channel=False)
                    await text_channel.edit(topic=f"Custom PRIVATE channel for {member.name}")
                    await text_channel.edit(slowmode_delay=7200)

                    ema = discord.Embed(
                        description="Please access the `thread channel` to post your profile!"
                    )
                    a = await text_channel.send(f"Welcome {member.mention}!  (â‰§â—¡â‰¦)", embed=ema)
                    thre = await text_channel.create_thread(name=f"Intro - {member.name}", message=a, auto_archive_duration=1440, reason=None)

                    # await thre.send(f"Shall we start? [yes/no] {member.mention}")

                    # global check_join

                    def check_join(msg):
                        return msg.author == member

                    # try:
                    #     msg = await self.bot.wait_for("message", check=check_join, timeout=300)
                    # except asyncio.TimeoutError:
                    #     return

                    await thre.send("What is your name?")

                    try:
                        msg1 = await self.bot.wait_for("message", check=check_join, timeout=300)

                    except asyncio.TimeoutError:
                        error2 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                        await asyncio.sleep(5)
                        await error2.delete()
                        return

                    if msg1:
                        await thre.send("How old are you?")

                        try:
                            msg2 = await self.bot.wait_for("message", check=check_join, timeout=300)
                        except asyncio.TimeoutError:
                            error3 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                            await asyncio.sleep(5)
                            await error3.delete()
                            return

                        if msg2:
                            await thre.send("What is your gender?")

                            try:
                                msg3 = await self.bot.wait_for("message", check=check_join, timeout=300)
                            except asyncio.TimeoutError:
                                error5 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                                await asyncio.sleep(5)
                                await error5.delete()
                                return

                            if msg3:
                                await thre.send("What are your pronouns?")

                                try:
                                    msg4 = await self.bot.wait_for("message", check=check_join, timeout=300)
                                except asyncio.TimeoutError:
                                    error6 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                                    await asyncio.sleep(5)
                                    await error6.delete()
                                    return

                                if msg4:
                                    await thre.send("Where are you from?")

                                    try:
                                        msg5 = await self.bot.wait_for("message", check=check_join, timeout=300)
                                    except asyncio.TimeoutError:
                                        error7 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                                        await asyncio.sleep(5)
                                        await error7.delete()
                                        return

                                    if msg5:
                                        await thre.send("Alright last question. What are your interests?")

                                        try:
                                            msg6 = await self.bot.wait_for("message", check=check_join, timeout=300)
                                        except asyncio.TimeoutError:
                                            error8 = await thre.send("<:disagree:943603027854626816> Introduction process failed")
                                            await asyncio.sleep(5)
                                            await error8.delete()
                                            return

                                        if msg6:
                                            await thre.send("<:agree:766575148035473418> Thank you! Introduction posted successfully in <#999682901786505336>.\n\n**Note:** You can always edit your intro by using command `;intro`")

                                            writeDocument = str(member.avatar.url)
                                            post = {"_id": member.id, "ident": "cb", "username": member.name, "avatar": writeDocument, "name": msg1.content,
                                                    "age": msg2.content, "gender": msg3.content, "pronoun": msg4.content, "location": msg5.content, "interests": msg6.content}

                                            if collection.find_one({"_id": member.id}):
                                                collection.update_many({"_id": member.id}, {"$set": {"username": member.name, "avatar": writeDocument, "name": msg1.content,
                                                                    "age": msg2.content, "gender": msg3.content, "pronoun": msg4.content, "location": msg5.content, "interests": msg6.content}})
                                            else:
                                                collection.insert_one(post)

                                            results = collection.find_one(
                                                {"_id": member.id})

                                            value = random.randint(0, 0xffffff)
                                            embed = discord.Embed(color=value)
                                            embed.set_author(
                                                name=results["username"], icon_url=results["avatar"])
                                            embed.add_field(
                                                name="Name:", value=results["name"])
                                            embed.add_field(
                                                name="Age:", value=results["age"])
                                            embed.add_field(
                                                name="Gender:", value=results["gender"])
                                            embed.add_field(
                                                name="Pronouns:", value=results["pronoun"], inline=False)
                                            embed.add_field(
                                                name="Location:", value=results["location"], inline=False)
                                            embed.add_field(
                                                name="Interests:", value=results["interests"], inline=False)
                                            embed.set_thumbnail(
                                                url=results["avatar"])
                                            a = self.bot.get_channel(
                                                999682901786505336)
                                            xx = await a.send(embed=embed)
                                            await xx.add_reaction("ðŸ‘‹")

                                            collection.update_one({"_id": member.id}, {
                                                                "$set": {"msg_id": xx.id}})
                except: 
                    try: 
                        user_a = member

                        categ = discord.utils.get(guild.categories, name="PRIVATE SPACE (2)")
                        #text_channel = await categ.create_text_channel(f"{member.name}s vent")
                        text_channel = await categ.create_text_channel(f"{member.name}s - {member.discriminator}")
                        await text_channel.set_permissions(user_a, send_messages=True, view_channel=True)
                        await text_channel.set_permissions(guild.default_role, send_messages=False, view_channel=False)
                        await text_channel.edit(topic=f"Custom PRIVATE channel for {member.name}")
                        await text_channel.edit(slowmode_delay=7200)

                        ema = discord.Embed(
                            description="Please access the `thread channel` to post your profile!"
                        )
                        a = await text_channel.send(f"welcome {member.mention}!  (â‰§â—¡â‰¦)", embed=ema)
                        await text_channel.create_thread(name=f"Intro - {member.name}", message=a, auto_archive_duration=1440, reason=None)   
                    except: 
                        try: 
                            user_a = member

                            categ = discord.utils.get(guild.categories, name="PRIVATE SPACE (3)")
                            #text_channel = await categ.create_text_channel(f"{member.name}s vent")
                            text_channel = await categ.create_text_channel(f"{member.name}s - {member.discriminator}")
                            await text_channel.set_permissions(user_a, send_messages=True, view_channel=True)
                            await text_channel.set_permissions(guild.default_role, send_messages=False, view_channel=False)
                            await text_channel.edit(topic=f"Custom PRIVATE channel for {member.name}")
                            await text_channel.edit(slowmode_delay=7200)

                            ema = discord.Embed(
                                description="Please access the `thread channel` to post your profile!"
                            )
                            a = await text_channel.send(f"welcome {member.mention}!  (â‰§â—¡â‰¦)", embed=ema)
                            await text_channel.create_thread(name=f"Intro - {member.name}", message=a, auto_archive_duration=1440, reason=None)   
                        except: 
                            try: 
                                user_a = member

                                categ = discord.utils.get(guild.categories, name="PRIVATE SPACE (4)")
                                #text_channel = await categ.create_text_channel(f"{member.name}s vent")
                                text_channel = await categ.create_text_channel(f"{member.name}s - {member.discriminator}")
                                await text_channel.set_permissions(user_a, send_messages=True, view_channel=True)
                                await text_channel.set_permissions(guild.default_role, send_messages=False, view_channel=False)
                                await text_channel.edit(topic=f"Custom PRIVATE channel for {member.name}")
                                await text_channel.edit(slowmode_delay=7200)
                                ema = discord.Embed(
                                    description="Please access the `thread channel` to post your profile!"
                                )
                                a = await text_channel.send(f"welcome {member.mention}!  (â‰§â—¡â‰¦)", embed=ema)
                                await text_channel.create_thread(name=f"Intro - {member.name}", message=a, auto_archive_duration=1440, reason=None)                                   
                            except: 
                                user_a = member
                                categ = discord.utils.get(guild.categories, name="PRIVATE SPACE (5)")
                                #text_channel = await categ.create_text_channel(f"{member.name}s vent")
                                text_channel = await categ.create_text_channel(f"{member.name}s - {member.discriminator}")
                                await text_channel.set_permissions(user_a, send_messages=True, view_channel=True)
                                await text_channel.set_permissions(guild.default_role, send_messages=False, view_channel=False)
                                await text_channel.edit(topic=f"Custom PRIVATE channel for {member.name}")
                                await text_channel.edit(slowmode_delay=7200) 
                                ema = discord.Embed(
                                    description="Please access the `thread channel` to post your profile!"
                                )
                                a = await text_channel.send(f"welcome {member.mention}!  (â‰§â—¡â‰¦)", embed=ema)
                                await text_channel.create_thread(name=f"Intro - {member.name}", message=a, auto_archive_duration=1440, reason=None)   
    @commands.Cog.listener()
    async def on_member_remove(self, member):
        if member.guild.id == 999682901308342342:
            guild = self.bot.get_guild(999682901308342342)
            try: 
                memberName = f"{member.name}".lower()
                modifiedName = ''.join(char for char in memberName if char.isalnum() or char in " ").replace(" ", "-")
                channel = discord.utils.get(guild.channels, name=f'{modifiedName}s-{member.discriminator}')
                await channel.delete()
                collection.delete_many({'author_id': member.id})
            except: 
                memberName = f"{member.name}".lower()
                channel = discord.utils.get(guild.channels, name=f'{memberName}s-{member.discriminator}')
                await channel.delete()
                collection.delete_many({'author_id': member.id})

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        if before.avatar != after.avatar:
            if collection.find_one({"_id": before.id}):
                writeDocument = str(after.avatar.url)
                find_before = collection.find_one({"_id": before.id})

                collection.update_one({"_id": before.id}, {
                                      "$set": {"avatar": writeDocument}})
                find_after = collection.find_one({"_id": after.id})

                value = random.randint(0, 0xffffff)
                embed = discord.Embed(color=value)
                embed.set_author(
                    name=find_after["username"], icon_url=find_after["avatar"])
                embed.add_field(name="Name:", value=find_after["name"])
                embed.add_field(name="Age:", value=find_after["age"])
                embed.add_field(name="Gender:", value=find_after["gender"])
                embed.add_field(name="Pronouns:",
                                value=find_after["pronoun"], inline=False)
                embed.add_field(name="Location:",
                                value=find_after["location"], inline=False)
                embed.add_field(name="Interests:",
                                value=find_after["interests"], inline=False)
                embed.set_thumbnail(url=find_after["avatar"])

                channel = self.bot.get_channel(807750002096472114)
                txt = await channel.fetch_message(find_before["msg_id"])
                await txt.edit(embed=embed)
            else:
                return

    @commands.command()
    async def intro(self, ctx):
        cu = ctx.message.author
        if ctx.channel.id != 679707604494188549:
            x = await ctx.send("You cannot use that command here! Please go to <#679707604494188549>")
            await asyncio.sleep(10)
            await x.delete()
        else:
            if collection.find_one({"_id": ctx.author.id}):
                await ctx.send(f"**Your Introduction is already recorded.** Do you want to edit it? [yes/no] {cu.mention}")

                def check(msg):
                    return msg.author == ctx.author and msg.channel == ctx.channel and msg.content.lower() in ["y", "Y", "yes", "Yes", "YES", "n", "N", "no", "No", "NO"]

                try:
                    msg = await self.bot.wait_for("message", check=check, timeout=300)
                except asyncio.TimeoutError:
                    error = await ctx.send(f"<:disagree:943603027854626816>  Introduction process failed {cu.mention}")
                    await asyncio.sleep(5)
                    await error.delete()
                    return

                if msg.content.lower() == "y" or msg.content.lower() == "Y" or msg.content.lower() == "yes" or msg.content.lower() == "Yes" or msg.content.lower() == "YES":
                    await ctx.send(f"What is your name? {cu.mention}")

                    def check1(msg):
                        return msg.author == ctx.author and msg.channel == ctx.channel
                    try:
                        msg1 = await self.bot.wait_for("message", check=check1, timeout=300)

                    except asyncio.TimeoutError:
                        error2 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                        await asyncio.sleep(5)
                        await error2.delete()
                        return

                    if msg1:
                        await ctx.send(f"How old are you? {cu.mention}")

                        def check2(msg):
                            return msg.author == ctx.author and msg.channel == ctx.channel
                        try:
                            msg2 = await self.bot.wait_for("message", check=check2, timeout=300)
                        except asyncio.TimeoutError:
                            error3 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                            await asyncio.sleep(5)
                            await error3.delete()
                            return

                        if msg2:
                            await ctx.send(f"What is your gender? {cu.mention}")

                            def check3(msg):
                                return msg.author == ctx.author and msg.channel == ctx.channel

                            try:
                                msg3 = await self.bot.wait_for("message", check=check3, timeout=300)
                            except asyncio.TimeoutError:
                                error5 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                await asyncio.sleep(5)
                                await error5.delete()
                                return

                            if msg3:
                                await ctx.send(f"What are your pronouns? {cu.mention}")

                                def check4(msg):
                                    return msg.author == ctx.author and msg.channel == ctx.channel

                                try:
                                    msg4 = await self.bot.wait_for("message", check=check4, timeout=300)
                                except asyncio.TimeoutError:
                                    error6 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                    await asyncio.sleep(5)
                                    await error6.delete()
                                    return

                                if msg4:
                                    await ctx.send(f"Where are you from? {cu.mention}")

                                    def check5(msg):
                                        return msg.author == ctx.author and msg.channel == ctx.channel

                                    try:
                                        msg5 = await self.bot.wait_for("message", check=check5, timeout=300)
                                    except asyncio.TimeoutError:
                                        error7 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                        await asyncio.sleep(5)
                                        await error7.delete()
                                        return

                                    if msg5:
                                        await ctx.send(f"Alright last question. What are your interests? {cu.mention}")

                                        def check6(msg):
                                            return msg.author == ctx.author and msg.channel == ctx.channel

                                        try:
                                            msg6 = await self.bot.wait_for("message", check=check6, timeout=300)
                                        except asyncio.TimeoutError:
                                            error8 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                            await asyncio.sleep(5)
                                            await error8.delete()
                                            return

                                        if msg6:
                                            await ctx.send(f"<:agree:943603027313565757> Thank you! Introduction __updated__ successfully in <#807750002096472114>.\n**Note:** You can always delete your intro by using command `;deleteintro` or `;introdelete` {cu.mention}")
                else:
                    await ctx.send(f"Alright sure, have a nice day! {cu.mention}")

                writeDocument = str(ctx.author.avatar.url)
                #post = {"_id":ctx.author.id, "ident":"cb", "username":str(ctx.author), "avatar":writeDocument, "name":msg1.content, "age":msg2.content, "gender":msg3.content, "pronoun":msg4.content, "location":msg5.content, "interests":msg6.content}

                existing_data = collection.find_one(
                    {"_id": ctx.author.id})  # has msg.id

                collection.update_many({"_id": ctx.author.id}, {"$set": {"username": str(ctx.author), "avatar": writeDocument, "name": msg1.content,
                                       "age": msg2.content, "gender": msg3.content, "pronoun": msg4.content, "location": msg5.content, "interests": msg6.content}})
                # else:
                #    collection.insert_one(post)

                results = collection.find_one({"_id": ctx.author.id})

                value = random.randint(0, 0xffffff)
                embed = discord.Embed(color=value)
                embed.set_author(
                    name=results["username"], icon_url=results["avatar"])
                embed.add_field(name="Name:", value=results["name"])
                embed.add_field(name="Age:", value=results["age"])
                embed.add_field(name="Gender:", value=results["gender"])
                embed.add_field(name="Pronouns:",
                                value=results["pronoun"], inline=False)
                embed.add_field(name="Location:",
                                value=results["location"], inline=False)
                embed.add_field(name="Interests:",
                                value=results["interests"], inline=False)
                embed.set_thumbnail(url=results["avatar"])

                channel = self.bot.get_channel(807750002096472114)
                txt = await channel.fetch_message(existing_data["msg_id"])
                await txt.edit(embed=embed)

                collection.update_one({"_id": ctx.author.id}, {
                                      "$set": {"msg_id": txt.id}})

            else:
                await ctx.send(f"Shall we start? [yes/no] {cu.mention}")

                def check(msg):
                    return msg.author == ctx.author and msg.channel == ctx.channel and msg.content.lower() in ["y", "Y", "yes", "Yes", "YES", "n", "N", "no", "No", "NO"]

                try:
                    msg = await self.bot.wait_for("message", check=check, timeout=300)
                except asyncio.TimeoutError:
                    error = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                    await asyncio.sleep(5)
                    await error.delete()
                    return

                if msg.content.lower() == "y" or msg.content.lower() == "Y" or msg.content.lower() == "yes" or msg.content.lower() == "Yes" or msg.content.lower() == "YES":
                    await ctx.send(f"What is your name? {cu.mention}")

                    def check1(msg):
                        return msg.author == ctx.author and msg.channel == ctx.channel
                    try:
                        msg1 = await self.bot.wait_for("message", check=check1, timeout=300)

                    except asyncio.TimeoutError:
                        error2 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                        await asyncio.sleep(5)
                        await error2.delete()
                        return

                    if msg1:
                        await ctx.send(f"How old are you? {cu.mention}")

                        def check2(msg):
                            return msg.author == ctx.author and msg.channel == ctx.channel
                        try:
                            msg2 = await self.bot.wait_for("message", check=check2, timeout=300)
                        except asyncio.TimeoutError:
                            error3 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                            await asyncio.sleep(5)
                            await error3.delete()
                            return

                        if msg2:
                            await ctx.send(f"What is your gender? {cu.mention}")

                            def check3(msg):
                                return msg.author == ctx.author and msg.channel == ctx.channel

                            try:
                                msg3 = await self.bot.wait_for("message", check=check3, timeout=300)
                            except asyncio.TimeoutError:
                                error5 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                await asyncio.sleep(5)
                                await error5.delete()
                                return

                            if msg3:
                                await ctx.send(f"What are your pronouns? {cu.mention}")

                                def check4(msg):
                                    return msg.author == ctx.author and msg.channel == ctx.channel

                                try:
                                    msg4 = await self.bot.wait_for("message", check=check4, timeout=300)
                                except asyncio.TimeoutError:
                                    error6 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                    await asyncio.sleep(5)
                                    await error6.delete()
                                    return

                                if msg4:
                                    await ctx.send(f"Where are you from? {cu.mention}")

                                    def check5(msg):
                                        return msg.author == ctx.author and msg.channel == ctx.channel

                                    try:
                                        msg5 = await self.bot.wait_for("message", check=check5, timeout=300)
                                    except asyncio.TimeoutError:
                                        error7 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                        await asyncio.sleep(5)
                                        await error7.delete()
                                        return

                                    if msg5:
                                        await ctx.send(f"Alright last question. What are your interests? {cu.mention}")

                                        def check6(msg):
                                            return msg.author == ctx.author and msg.channel == ctx.channel

                                        try:
                                            msg6 = await self.bot.wait_for("message", check=check6, timeout=300)
                                        except asyncio.TimeoutError:
                                            error8 = await ctx.send(f"<:disagree:943603027854626816> Introduction process failed {cu.mention}")
                                            await asyncio.sleep(5)
                                            await error8.delete()
                                            return

                                        if msg6:
                                            await ctx.send(f"<:agree:943603027313565757> Thank you! Introduction posted successfully in <#807750002096472114>.\n**Note:** You can always delete your intro by using command `;deleteintro` or `;introdelete` {cu.mention}")
                else:
                    await ctx.send(f"Alright sure, have a nice day! {cu.mention}")

                writeDocument = str(ctx.author.avatar.url)
                post = {"_id": ctx.author.id, "ident": "cb", "username": str(
                    ctx.author), "avatar": writeDocument, "name": msg1.content, "age": msg2.content, "gender": msg3.content, "pronoun": msg4.content, "location": msg5.content, "interests": msg6.content}

                if collection.find_one({"_id": ctx.author.id}):
                    collection.update_many({"_id": ctx.author.id}, {"$set": {"username": str(ctx.author), "avatar": writeDocument, "name": msg1.content,
                                           "age": msg2.content, "gender": msg3.content, "pronoun": msg4.content, "location": msg5.content, "interests": msg6.content}})
                else:
                    collection.insert_one(post)

                results = collection.find_one({"_id": ctx.author.id})

                value = random.randint(0, 0xffffff)
                embed = discord.Embed(color=value)
                embed.set_author(
                    name=results["username"], icon_url=results["avatar"])
                embed.add_field(name="Name:", value=results["name"])
                embed.add_field(name="Age:", value=results["age"])
                embed.add_field(name="Gender:", value=results["gender"])
                embed.add_field(name="Pronouns:",
                                value=results["pronoun"], inline=False)
                embed.add_field(name="Location:",
                                value=results["location"], inline=False)
                embed.add_field(name="Interests:",
                                value=results["interests"], inline=False)
                embed.set_thumbnail(url=results["avatar"])
                a = self.bot.get_channel(807750002096472114)
                xx = await a.send(embed=embed)
                await xx.add_reaction("ðŸ‘‹")

                collection.update_one({"_id": ctx.author.id}, {
                                      "$set": {"msg_id": xx.id}})

async def setup(bot):
    await bot.add_cog(dating(bot))